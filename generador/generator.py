#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    May 13, 2021 09:43:03 PM CEST  platform: Windows NT

from tkcalendar import DateEntry
import generator_support
from tkinter.font import names
from ESIOS import ESIOS
import requests
import xlrd
import pandas as pd
from datetime import datetime
from tkinter.constants import DISABLED
from tkinter.filedialog import asksaveasfilename
from tkinter import messagebox

token = "c1308fa94915ff56abb97afc626cf162a9936b7bd960aa45303cb1279f0b701f"
esios = ESIOS(token=token)


try:
    import Tkinter as tk
    
except ImportError:
    import tkinter as tk

END = tk.END
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    generator_support.set_Tk_var()
    top = generator(root)
    generator_support.init(root, top)
    root.mainloop()


w = None


def create_generator(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_generator(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel(root)
    generator_support.set_Tk_var()
    top = generator(w)
    generator_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_generator():
    global w
    w.destroy()
    w = None

class IntEntry(tk.Entry):
    def __init__(self, master=None, **kwargs):
        self.var = tk.StringVar()
        self.var.set(1)
        ttk.Entry.__init__(self, master, textvariable=self.var, **kwargs)
        self.old_value = ''
        self.var.trace('w', self.check)
        self.get, self.set = self.var.get, self.var.set

    def check(self, *args):
        if self.get().isdigit(): 
            # the current value is only digits; allow this
            self.old_value = self.get()
        elif self.get() == '' or int(self.get()) == 0:
            self.set(1)

        else:
            # there's non-digit characters in the input; reject this 
            self.set(self.old_value)
            
            
def intValidation(s):
    if s.isdigit():
        return True
    else:
        return False


def to_timeseries_ESIOS(writer, df_list, steps, names):

    if isinstance(steps, int):
        steps = [steps for _ in df_list]
    else:
        assert len(df_list) == len(
            steps), "La cantidad de pasos no se corresponden con la cantidad de DataFrames"

    for i, df in enumerate(df_list):

        current_df = df.copy()

        current_df = current_df.drop(
            ['datetime', 'tz_time', 'geo_id', 'geo_name'], axis=1)
        current_df = current_df.resample("10min").sum()
        current_df.columns = [names[i]]
        print(names[i])
        for j in range(steps[i]):
            current_df[f"{current_df.columns[0]}-{j+1}"] = current_df[current_df.columns[0]
                                                                      ].shift(j+1)

        current_df.dropna(inplace=True)
        current_df.index = current_df.index.tz_localize(None)
        current_df.to_excel(writer, sheet_name=current_df.columns[0][:31])

    writer.save()


# =============================================================================
# def to_timeseries_GAS(writer, start, end):
#     products = ["GWDES", "GDAES_D+1","GDAES_D+2","GDAES_D+3"]
#     gas_url = "https://www.mibgas.es/es/file-access/MIBGAS_Data_{date}.xlsx?path=AGNO_{date}/XLS"
#     years = set((start.year, end.year))
#     urls = [gas_url.format(date=_year)
#             for _year in range(min(years), max(years)+1)]
#     gas_data = pd.DataFrame()
# 
#     for u in urls:
#         r = requests.get(u, stream=True)
#         try:
#             temp = pd.read_excel(r.content, parse_dates=True, index_col=0, usecols=[
#                 'Trading day', 'Product', 'Last Daily Price\n[EUR/MWh]'], sheet_name="Trading Data PVB&VTP")
#             print(temp)
#             gas_data = gas_data.append(temp)
# 
#         except xlrd.biffh.XLRDError:
#             temp = pd.read_excel(r.content, parse_dates=True, index_col=0, usecols=[
#                 'Trading day', 'Product', 'Last Daily Price\n[EUR/MWh]'], sheet_name="Trading Data PVB")
#             print(temp)
#             gas_data = gas_data.append(temp)
#         except:
#             print(f"Error con url {u}")
#     gas_data.sort_index(inplace=True, level=0, sort_remaining=True)
#     gas_data = gas_data[gas_data.Product.isin(products)]
#     gas_data = gas_data[start:end]
#     date = gas_data.index
#     print(gas_data.columns)
#     product = gas_data['Product'][:]
#     gas_data.drop(['Product'], axis=1, inplace=True)
#     gas_data.index = [date, product]
#     gas_data.reindex(products, level=1)
#     print(gas_data)
#     gas_data.to_excel(writer, sheet_name="Precio Gas Natural")
# 
#     writer.save()
# =============================================================================


# =============================================================================
# def to_timeseries_CO2(writer, start, end):
#     def dateparse(x): return datetime.strptime(x, '%d-%m-%Y')
#     co2_url = "https://www.sendeco2.com/site_sendeco/service/download-csv.php?year={year}"
#     years = set((start.year, end.year))
#     urls = [co2_url.format(year=_year)
#             for _year in range(min(years), max(years)+1)]
#     co2_data = pd.DataFrame()
#     for u in urls:
#         r = requests.get(u, stream=True)
#         co2_data = co2_data.append(pd.read_csv(
#             r.raw, parse_dates=True, index_col=0, date_parser=dateparse, sep=';'))
# 
#     co2_data = co2_data[start:end]
# 
#     co2_data.to_excel(writer, sheet_name='Precio CO2')
# 
#     writer.save()
# =============================================================================


class generator:
    def generate(self):

        df_list = []
        steps = []
        names = []
        if generator_support.demanda_real_in.get():
            names += esios.get_names((1293,)).tolist()
            df_list.append(esios.get_data(1293,
                                          datetime.combine(
                                              self.from_demanda_real.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_demanda_real.get_date(), datetime.min.time())))
            steps.append(int(self.steps_demanda_real.get()))
        if generator_support.demanda_prev_in.get():
            names += esios.get_names((544,)).tolist()
            df_list.append(esios.get_data(544,
                                          datetime.combine(
                                              self.from_demanda_prevista.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_demanda_prevista.get_date(), datetime.min.time())))
            steps.append(int(self.steps_demanda_prev.get()))
        if generator_support.solar_real_in.get():
            names += esios.get_names((10206,)).tolist()
            df_list.append(esios.get_data(10206,
                                          datetime.combine(
                                              self.from_gen_solar_real.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_gen_solar_real.get_date(), datetime.min.time())))
            steps.append(int(self.steps_gen_solar_real.get()))
        if generator_support.solar_prev_in.get():
            names += esios.get_names((10034,)).tolist()
            df_list.append(esios.get_data(10034,
                                          datetime.combine(
                                              self.from_gen_solar_prevista.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_gen_solar_prevista.get_date(), datetime.min.time())))
            steps.append(int(self.steps_gen_solar_prev.get()))
        if generator_support.eol_real_in.get():
            names += esios.get_names((551,)).tolist()
            df_list.append(esios.get_data(551,
                                          datetime.combine(
                                              self.from_gen_eol_real.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_gen_eol_real.get_date(), datetime.min.time())))
            steps.append(int(self.steps_gen_eol_real.get()))
        if generator_support.eol_prev_in.get():
            names += esios.get_names((541,)).tolist()
            df_list.append(esios.get_data(541,
                                          datetime.combine(
                                              self.from_gen_eol_prevista.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_gen_eol_prevista.get_date(), datetime.min.time())))
            steps.append(int(self.steps_gen_eol_prevista.get()))
            
        if generator_support.generacion_medida_eolica.get():
            names += esios.get_names((10037,)).tolist()
            df_list.append(esios.get_data(10037,
                                          datetime.combine(
                                              self.from_generacion_medida_eol.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_eol.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_eol.get()))
            
        if generator_support.generacion_medida_eolica_marina.get():
            names += esios.get_names((1160,)).tolist()
            df_list.append(esios.get_data(1160,
                                          datetime.combine(
                                              self.from_generacion_medida_eol_marina.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_eol_marina.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_eol_marina.get()))
            
        if generator_support.generacion_medida_eolica_terrestre.get():
            names += esios.get_names((1159,)).tolist()
            df_list.append(esios.get_data(1159,
                                          datetime.combine(
                                              self.from_generacion_medida_eol_terrestre.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_eol_terrestre.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_eol_terrestre.get()))
            
        if generator_support.generacion_medida_solar.get():
            names += esios.get_names((10205,)).tolist()
            df_list.append(esios.get_data(10205,
                                          datetime.combine(
                                              self.from_generacion_medida_solar.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_solar.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_solar.get()))
            
        if generator_support.generacion_medida_solar_fotovoltaica.get():
            names += esios.get_names((1161,)).tolist()
            df_list.append(esios.get_data(1161,
                                          datetime.combine(
                                              self.from_generacion_medida_solar_foto.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_solar_foto.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_solar_foto.get()))
            
        if generator_support.generacion_medida_solar_termica.get():
            names += esios.get_names((1162,)).tolist()
            df_list.append(esios.get_data(1162,
                                          datetime.combine(
                                              self.from_generacion_medida_solar_term.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_solar_term.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_solar_term.get()))
            
        if generator_support.generacion_medida_solar.get():
            names += esios.get_names((10205,)).tolist()
            df_list.append(esios.get_data(10205,
                                          datetime.combine(
                                              self.from_generacion_medida_solar.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_solar.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_solar.get()))
            
        if generator_support.generacion_medida_total.get():
            names += esios.get_names((10043,)).tolist()
            df_list.append(esios.get_data(10043,
                                          datetime.combine(
                                              self.from_generacion_medida_total.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_medida_total.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_medida_total.get()))
            
        if generator_support.generacion_prevista_total_in.get():
            names += esios.get_names((10205,)).tolist()
            df_list.append(esios.get_data(10205,
                                          datetime.combine(
                                              self.from_generacion_prevista_total.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_prevista_total.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_prevista_total.get()))
            
        if generator_support.generacion_prevista_solar_in.get():
            names += esios.get_names((10034,)).tolist()
            df_list.append(esios.get_data(10034,
                                          datetime.combine(
                                              self.from_generacion_prevista_solar.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_prevista_solar.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_prevista_solar.get()))
            
        if generator_support.generacion_prevista_solar_fotovoltaica.get():
            names += esios.get_names((542,)).tolist()
            df_list.append(esios.get_data(542,
                                          datetime.combine(
                                              self.from_generacion_prevista_solar_foto.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_prevista_solar_foto.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_prevista_solar_foto.get()))
            
        if generator_support.generacion_prevista_solar_termica.get():
            names += esios.get_names((543,)).tolist()
            df_list.append(esios.get_data(543,
                                          datetime.combine(
                                              self.from_generacion_prevista_solar_term.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_generacion_prevista_solar_term.get_date(), datetime.min.time())))
            steps.append(int(self.steps_generacion_prevista_solar_term.get()))
        
# =============================================================================
#         if generator_support.co2_evitable.get():
#             names += esios.get_names((835,)).tolist()
#             df_list.append(esios.get_data(835,
#                                           datetime.combine(
#                                               self.from_co2_evitable.get_date(), datetime.min.time()),
#                                           datetime.combine(self.to_co2_evitable.get_date(), datetime.min.time())))
#             steps.append(int(self.steps_co2_evitable.get()))
# =============================================================================
            
        if generator_support.solar_real_foto_in.get():
            names += esios.get_names((1295,)).tolist()
            df_list.append(esios.get_data(1295,
                                          datetime.combine(
                                              self.from_solar_real_foto.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_solar_real_foto.get_date(), datetime.min.time())))
            steps.append(int(self.steps_solar_real_foto.get()))
            
        if generator_support.solar_real_term_in.get():
            names += esios.get_names((1294,)).tolist()
            df_list.append(esios.get_data(1294,
                                          datetime.combine(
                                              self.from_solar_real_term.get_date(), datetime.min.time()),
                                          datetime.combine(self.to_solar_real_term.get_date(), datetime.min.time())))
            steps.append(int(self.steps_solar_real_term.get()))

        filename = asksaveasfilename(initialdir="/", initialfile="dataset.xlsx", defaultextension=".xlsx",
                                     title="Guardar fichero", filetypes=(("archivos de Excel", "*.xlsx"), ("Todos los archivos", "*.*")))

        print(filename)

        writer = pd.ExcelWriter(filename, engine="openpyxl", mode='w', options={  # pylint: disable=abstract-class-instantiated
                                'remove_timezone': True})

        try:
            if df_list:
                to_timeseries_ESIOS(writer, df_list, steps, names)
        except Exception as e:
            print("Error escribiendo de ESIOS")
            print(e)

# =============================================================================
#         try:
#             if generator_support.gas_in.get():
#                 to_timeseries_GAS(writer,
#                                   datetime.combine(
#                                       self.from_gas.get_date(), datetime.min.time()),
#                                   datetime.combine(self.to_gas.get_date(), datetime.min.time()))
#         except Exception as e:
#             print("Error escribiendo de ESIOS")
#             print(e)
# 
#         try:
#             if generator_support.co2_in.get():
#                 to_timeseries_CO2(writer,
#                                   datetime.combine(
#                                       self.from_co2.get_date(), datetime.min.time()),
#                                   datetime.combine(self.to_co2.get_date(), datetime.min.time()))
#         except Exception as e:
#             print("Error escribiendo de ESIOS")
#             print(e)
# =============================================================================
        messagebox.showinfo(title="Generador dataset", message="Hecho")
        
    def resize(self, event):
        w,h = event.width-100, event.height-100
        self.canvas.config(width=w, height=h)

     
    def __init__(self, top=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("600x762+312+143")
        top.minsize(120, 1)
        top.maxsize(3844, 1061)
        top.resizable(1,  1)
        top.title("Generador dataset")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        reg = top.register(intValidation)
        
        self.canvas=tk.Canvas(top)
        self.canvas.pack(side='left', fill='both', expand=True)
        self.scrollbar = tk.Scrollbar(top, orient="vertical", command=self.canvas.yview)
        self.frame = tk.Frame(self.canvas)
        self.frame.pack(side = 'left', fill = 'both', expand = True, padx = 10, pady = 10)
        
        self.canvas.bind('<Configure>', self.resize)

        #Demanda tiempo real
        self.labelframe_demanda = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_demanda.pack()
        self.labelframe_demanda.configure(relief='groove')
        self.labelframe_demanda.configure(foreground="black")
        self.labelframe_demanda.configure(text='''Demanda tiempo real''')
        self.labelframe_demanda.configure(background="#d9d9d9")
        self.labelframe_demanda.configure(highlightbackground="#d9d9d9")
        self.labelframe_demanda.configure(highlightcolor="black")
        
        self.demanda_real_in = tk.Checkbutton(self.labelframe_demanda)
        self.demanda_real_in.pack(side='left', padx=10)
        self.demanda_real_in.configure(activebackground="#ececec")
        self.demanda_real_in.configure(activeforeground="#000000")
        self.demanda_real_in.configure(background="#d9d9d9")
        self.demanda_real_in.configure(disabledforeground="#a3a3a3")
        self.demanda_real_in.configure(foreground="#000000")
        self.demanda_real_in.configure(highlightbackground="#d9d9d9")
        self.demanda_real_in.configure(highlightcolor="black")
        self.demanda_real_in.configure(justify='left')
        self.demanda_real_in.configure(text='''Incluir''')
        self.demanda_real_in.configure(
            variable=generator_support.demanda_real_in)

        self.from_demanda_real = DateEntry(self.labelframe_demanda, width=20)
        self.from_demanda_real.pack(side='left', padx=10)
        self.from_demanda_real.configure(background="white")
        self.from_demanda_real.configure(disabledforeground="#a3a3a3")
        self.from_demanda_real.configure(font="TkFixedFont")
        self.from_demanda_real.configure(foreground="#000000")

        self.to_demanda_real = DateEntry(self.labelframe_demanda, width=20)
        self.to_demanda_real.pack(side='left', padx=10)
        self.to_demanda_real.configure(background="white")
        self.to_demanda_real.configure(disabledforeground="#a3a3a3")
        self.to_demanda_real.configure(font="TkFixedFont")
        self.to_demanda_real.configure(foreground="#000000")

        self.steps_demanda_real = IntEntry(self.labelframe_demanda, width=5)
        self.steps_demanda_real.pack(side='left')
        self.steps_demanda_real.configure(background="white")
        self.steps_demanda_real.configure(font="TkFixedFont")
        
        #Demanda prevista
        self.labelframe_demanda_prevista = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_demanda_prevista.pack()
        self.labelframe_demanda_prevista.configure(relief='groove')
        self.labelframe_demanda_prevista.configure(foreground="black")
        self.labelframe_demanda_prevista.configure(text='''Demanda prevista''')
        self.labelframe_demanda_prevista.configure(background="#d9d9d9")
        self.labelframe_demanda_prevista.configure(highlightbackground="#d9d9d9")
        self.labelframe_demanda_prevista.configure(highlightcolor="black")
        
        self.demanda_prev_in = tk.Checkbutton(self.labelframe_demanda_prevista)
        self.demanda_prev_in.pack(side='left', padx=10)
        self.demanda_prev_in.configure(activebackground="#ececec")
        self.demanda_prev_in.configure(activeforeground="#000000")
        self.demanda_prev_in.configure(background="#d9d9d9")
        self.demanda_prev_in.configure(disabledforeground="#a3a3a3")
        self.demanda_prev_in.configure(foreground="#000000")
        self.demanda_prev_in.configure(highlightbackground="#d9d9d9")
        self.demanda_prev_in.configure(highlightcolor="black")
        self.demanda_prev_in.configure(justify='left')
        self.demanda_prev_in.configure(text='''Incluir''')
        self.demanda_prev_in.configure(
            variable=generator_support.demanda_prev_in)

        self.from_demanda_prevista = DateEntry(self.labelframe_demanda_prevista, width=20)
        self.from_demanda_prevista.pack(side='left', padx=10)
        self.from_demanda_prevista.configure(background="white")
        self.from_demanda_prevista.configure(disabledforeground="#a3a3a3")
        self.from_demanda_prevista.configure(font="TkFixedFont")
        self.from_demanda_prevista.configure(foreground="#000000")

        self.to_demanda_prevista = DateEntry(self.labelframe_demanda_prevista, width=20)
        self.to_demanda_prevista.pack(side='left', padx=10)
        self.to_demanda_prevista.configure(background="white")
        self.to_demanda_prevista.configure(disabledforeground="#a3a3a3")
        self.to_demanda_prevista.configure(font="TkFixedFont")
        self.to_demanda_prevista.configure(foreground="#000000")

        self.steps_demanda_prev = IntEntry(self.labelframe_demanda_prevista, width=5)
        self.steps_demanda_prev.pack(side='left')
        self.steps_demanda_prev.configure(background="white")
        self.steps_demanda_prev.configure(font="TkFixedFont")
        self.steps_demanda_prev.configure(foreground="#000000")
            
        #Generación Solar Tiempo Real
        self.labelframe_sol_real = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_sol_real.pack()
        self.labelframe_sol_real.configure(relief='groove')
        self.labelframe_sol_real.configure(foreground="black")
        self.labelframe_sol_real.configure(text='''Generación Solar Tiempo Real''')
        self.labelframe_sol_real.configure(background="#d9d9d9")
        self.labelframe_sol_real.configure(highlightbackground="#d9d9d9")
        self.labelframe_sol_real.configure(highlightcolor="black")
        
        self.solar_real_in = tk.Checkbutton(self.labelframe_sol_real)
        self.solar_real_in.pack(side='left', padx=10)
        self.solar_real_in.configure(activebackground="#ececec")
        self.solar_real_in.configure(activeforeground="#000000")
        self.solar_real_in.configure(background="#d9d9d9")
        self.solar_real_in.configure(disabledforeground="#a3a3a3")
        self.solar_real_in.configure(foreground="#000000")
        self.solar_real_in.configure(highlightbackground="#d9d9d9")
        self.solar_real_in.configure(highlightcolor="black")
        self.solar_real_in.configure(justify='left')
        self.solar_real_in.configure(text='''Incluir''')
        self.solar_real_in.configure(
            variable=generator_support.solar_real_in)

        self.from_gen_solar_real = DateEntry(self.labelframe_sol_real, width=20)
        self.from_gen_solar_real.pack(side='left', padx=10)
        self.from_gen_solar_real.configure(background="white")
        self.from_gen_solar_real.configure(disabledforeground="#a3a3a3")
        self.from_gen_solar_real.configure(font="TkFixedFont")
        self.from_gen_solar_real.configure(foreground="#000000")

        self.to_gen_solar_real = DateEntry(self.labelframe_sol_real, width=20)
        self.to_gen_solar_real.pack(side='left', padx=10)
        self.to_gen_solar_real.configure(background="white")
        self.to_gen_solar_real.configure(disabledforeground="#a3a3a3")
        self.to_gen_solar_real.configure(font="TkFixedFont")
        self.to_gen_solar_real.configure(foreground="#000000")

        self.steps_gen_solar_real = IntEntry(self.labelframe_sol_real, width=5)
        self.steps_gen_solar_real.pack(side='left')
        self.steps_gen_solar_real.configure(background="white")
        self.steps_gen_solar_real.configure(font="TkFixedFont")
        self.steps_gen_solar_real.configure(foreground="#000000")
        
        #Generación Solar Prevista
        self.labelframe_sol_prevista = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_sol_prevista.pack()
        self.labelframe_sol_prevista.configure(relief='groove')
        self.labelframe_sol_prevista.configure(foreground="black")
        self.labelframe_sol_prevista.configure(text='''Generación Solar Prevista''')
        self.labelframe_sol_prevista.configure(background="#d9d9d9")
        self.labelframe_sol_prevista.configure(highlightbackground="#d9d9d9")
        self.labelframe_sol_prevista.configure(highlightcolor="black")
        
        self.solar_prev_in = tk.Checkbutton(self.labelframe_sol_prevista)
        self.solar_prev_in.pack(side='left', padx=10)
        self.solar_prev_in.configure(activebackground="#ececec")
        self.solar_prev_in.configure(activeforeground="#000000")
        self.solar_prev_in.configure(background="#d9d9d9")
        self.solar_prev_in.configure(disabledforeground="#a3a3a3")
        self.solar_prev_in.configure(foreground="#000000")
        self.solar_prev_in.configure(highlightbackground="#d9d9d9")
        self.solar_prev_in.configure(highlightcolor="black")
        self.solar_prev_in.configure(justify='left')
        self.solar_prev_in.configure(text='''Incluir''')
        self.solar_prev_in.configure(
            variable=generator_support.solar_prev_in)

        self.from_gen_solar_prevista = DateEntry(self.labelframe_sol_prevista, width=20)
        self.from_gen_solar_prevista.pack(side='left', padx=10)
        self.from_gen_solar_prevista.configure(background="white")
        self.from_gen_solar_prevista.configure(disabledforeground="#a3a3a3")
        self.from_gen_solar_prevista.configure(font="TkFixedFont")
        self.from_gen_solar_prevista.configure(foreground="#000000")

        self.to_gen_solar_prevista = DateEntry(self.labelframe_sol_prevista, width=20)
        self.to_gen_solar_prevista.pack(side='left', padx=10)
        self.to_gen_solar_prevista.configure(background="white")
        self.to_gen_solar_prevista.configure(disabledforeground="#a3a3a3")
        self.to_gen_solar_prevista.configure(font="TkFixedFont")
        self.to_gen_solar_prevista.configure(foreground="#000000")

        self.steps_gen_solar_prev = IntEntry(self.labelframe_sol_prevista, width=5)
        self.steps_gen_solar_prev.pack(side='left')
        self.steps_gen_solar_prev.configure(background="white")
        self.steps_gen_solar_prev.configure(font="TkFixedFont")
        self.steps_gen_solar_prev.configure(foreground="#000000")
        
        #Generación Eólica Tiempo Real
        self.labelframe_eol_real = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_eol_real.pack()
        self.labelframe_eol_real.configure(relief='groove')
        self.labelframe_eol_real.configure(foreground="black")
        self.labelframe_eol_real.configure(text='''Generación Eólica Tiempo Real''')
        self.labelframe_eol_real.configure(background="#d9d9d9")
        self.labelframe_eol_real.configure(highlightbackground="#d9d9d9")
        self.labelframe_eol_real.configure(highlightcolor="black")
        
        self.eol_real_in = tk.Checkbutton(self.labelframe_eol_real)
        self.eol_real_in.pack(side='left', padx=10)
        self.eol_real_in.configure(activebackground="#ececec")
        self.eol_real_in.configure(activeforeground="#000000")
        self.eol_real_in.configure(background="#d9d9d9")
        self.eol_real_in.configure(disabledforeground="#a3a3a3")
        self.eol_real_in.configure(foreground="#000000")
        self.eol_real_in.configure(highlightbackground="#d9d9d9")
        self.eol_real_in.configure(highlightcolor="black")
        self.eol_real_in.configure(justify='left')
        self.eol_real_in.configure(text='''Incluir''')
        self.eol_real_in.configure(
            variable=generator_support.eol_real_in)

        self.from_gen_eol_real = DateEntry(self.labelframe_eol_real, width=20)
        self.from_gen_eol_real.pack(side='left', padx=10)
        self.from_gen_eol_real.configure(background="white")
        self.from_gen_eol_real.configure(disabledforeground="#a3a3a3")
        self.from_gen_eol_real.configure(font="TkFixedFont")
        self.from_gen_eol_real.configure(foreground="#000000")

        self.to_gen_eol_real = DateEntry(self.labelframe_eol_real, width=20)
        self.to_gen_eol_real.pack(side='left', padx=10)
        self.to_gen_eol_real.configure(background="white")
        self.to_gen_eol_real.configure(disabledforeground="#a3a3a3")
        self.to_gen_eol_real.configure(font="TkFixedFont")
        self.to_gen_eol_real.configure(foreground="#000000")

        self.steps_gen_eol_real = IntEntry(self.labelframe_eol_real, width=5)
        self.steps_gen_eol_real.pack(side='left')
        self.steps_gen_eol_real.configure(background="white")
        self.steps_gen_eol_real.configure(font="TkFixedFont")
        self.steps_gen_eol_real.configure(foreground="#000000")
        
        
        #Generación Eólica Prevista
        self.labelframe_eol_prevista = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_eol_prevista.pack()
        self.labelframe_eol_prevista.configure(relief='groove')
        self.labelframe_eol_prevista.configure(foreground="black")
        self.labelframe_eol_prevista.configure(text='''Generación Eólica Prevista''')
        self.labelframe_eol_prevista.configure(background="#d9d9d9")
        self.labelframe_eol_prevista.configure(highlightbackground="#d9d9d9")
        self.labelframe_eol_prevista.configure(highlightcolor="black")
        
        self.eol_prev_in = tk.Checkbutton(self.labelframe_eol_prevista)
        self.eol_prev_in.pack(side='left', padx=10)
        self.eol_prev_in.configure(activebackground="#ececec")
        self.eol_prev_in.configure(activeforeground="#000000")
        self.eol_prev_in.configure(background="#d9d9d9")
        self.eol_prev_in.configure(disabledforeground="#a3a3a3")
        self.eol_prev_in.configure(foreground="#000000")
        self.eol_prev_in.configure(highlightbackground="#d9d9d9")
        self.eol_prev_in.configure(highlightcolor="black")
        self.eol_prev_in.configure(justify='left')
        self.eol_prev_in.configure(text='''Incluir''')
        self.eol_prev_in.configure(
            variable=generator_support.eol_prev_in)

        self.from_gen_eol_prevista = DateEntry(self.labelframe_eol_prevista, width=20)
        self.from_gen_eol_prevista.pack(side='left', padx=10)
        self.from_gen_eol_prevista.configure(background="white")
        self.from_gen_eol_prevista.configure(disabledforeground="#a3a3a3")
        self.from_gen_eol_prevista.configure(font="TkFixedFont")
        self.from_gen_eol_prevista.configure(foreground="#000000")

        self.to_gen_eol_prevista = DateEntry(self.labelframe_eol_prevista, width=20)
        self.to_gen_eol_prevista.pack(side='left', padx=10)
        self.to_gen_eol_prevista.configure(background="white")
        self.to_gen_eol_prevista.configure(disabledforeground="#a3a3a3")
        self.to_gen_eol_prevista.configure(font="TkFixedFont")
        self.to_gen_eol_prevista.configure(foreground="#000000")

        self.steps_gen_eol_prevista = IntEntry(self.labelframe_eol_prevista, width=5)
        self.steps_gen_eol_prevista.pack(side='left')
        self.steps_gen_eol_prevista.configure(background="white")
        self.steps_gen_eol_prevista.configure(font="TkFixedFont")
        self.steps_gen_eol_prevista.configure(foreground="#000000")
        
        #Precio Gas Natural
# =============================================================================
#         self.labelframe_gas_natural = tk.LabelFrame(self.frame, pady=20, padx=15)
#         self.labelframe_gas_natural.pack()
#         self.labelframe_gas_natural.configure(relief='groove')
#         self.labelframe_gas_natural.configure(foreground="black")
#         self.labelframe_gas_natural.configure(text='''Precio Gas Natural''')
#         self.labelframe_gas_natural.configure(background="#d9d9d9")
#         self.labelframe_gas_natural.configure(highlightbackground="#d9d9d9")
#         self.labelframe_gas_natural.configure(highlightcolor="black")
#         
#         self.gas_in = tk.Checkbutton(self.labelframe_gas_natural)
#         self.gas_in.pack(side='left', padx=10)
#         self.gas_in.configure(activebackground="#ececec")
#         self.gas_in.configure(activeforeground="#000000")
#         self.gas_in.configure(background="#d9d9d9")
#         self.gas_in.configure(disabledforeground="#a3a3a3")
#         self.gas_in.configure(foreground="#000000")
#         self.gas_in.configure(highlightbackground="#d9d9d9")
#         self.gas_in.configure(highlightcolor="black")
#         self.gas_in.configure(justify='left')
#         self.gas_in.configure(text='''Incluir''')
#         self.gas_in.configure(
#             variable=generator_support.gas_in)
# 
#         self.from_gas = DateEntry(self.labelframe_gas_natural, width=20)
#         self.from_gas.pack(side='left', padx=10)
#         self.from_gas.configure(background="white")
#         self.from_gas.configure(disabledforeground="#a3a3a3")
#         self.from_gas.configure(font="TkFixedFont")
#         self.from_gas.configure(foreground="#000000")
# 
#         self.to_gas = DateEntry(self.labelframe_gas_natural, width=20)
#         self.to_gas.pack(side='left', padx=10)
#         self.to_gas.configure(background="white")
#         self.to_gas.configure(disabledforeground="#a3a3a3")
#         self.to_gas.configure(font="TkFixedFont")
#         self.to_gas.configure(foreground="#000000")
# =============================================================================
        
        #Precio CO2
# =============================================================================
#         self.labelframe_co2 = tk.LabelFrame(self.frame, pady=20, padx=15)
#         self.labelframe_co2.pack()
#         self.labelframe_co2.configure(relief='groove')
#         self.labelframe_co2.configure(foreground="black")
#         self.labelframe_co2.configure(text='''Precio CO2''')
#         self.labelframe_co2.configure(background="#d9d9d9")
#         self.labelframe_co2.configure(highlightbackground="#d9d9d9")
#         self.labelframe_co2.configure(highlightcolor="black")
#         
#         self.co2_in = tk.Checkbutton(self.labelframe_co2)
#         self.co2_in.pack(side='left', padx=10)
#         self.co2_in.configure(activebackground="#ececec")
#         self.co2_in.configure(activeforeground="#000000")
#         self.co2_in.configure(background="#d9d9d9")
#         self.co2_in.configure(disabledforeground="#a3a3a3")
#         self.co2_in.configure(foreground="#000000")
#         self.co2_in.configure(highlightbackground="#d9d9d9")
#         self.co2_in.configure(highlightcolor="black")
#         self.co2_in.configure(justify='left')
#         self.co2_in.configure(text='''Incluir''')
#         self.co2_in.configure(
#             variable=generator_support.co2_in)
# 
#         self.from_co2 = DateEntry(self.labelframe_co2, width=20)
#         self.from_co2.pack(side='left', padx=10)
#         self.from_co2.configure(background="white")
#         self.from_co2.configure(disabledforeground="#a3a3a3")
#         self.from_co2.configure(font="TkFixedFont")
#         self.from_co2.configure(foreground="#000000")
# 
#         self.to_co2 = DateEntry(self.labelframe_co2, width=20)
#         self.to_co2.pack(side='left', padx=10)
#         self.to_co2.configure(background="white")
#         self.to_co2.configure(disabledforeground="#a3a3a3")
#         self.to_co2.configure(font="TkFixedFont")
#         self.to_co2.configure(foreground="#000000")
#         
# =============================================================================
        #CO2 evitable
# =============================================================================
#         self.labelframe_co2_evitable = tk.LabelFrame(self.frame, pady=20, padx=15)
#         self.labelframe_co2_evitable.pack()
#         self.labelframe_co2_evitable.configure(relief='groove')
#         self.labelframe_co2_evitable.configure(foreground="black")
#         self.labelframe_co2_evitable.configure(text='''CO2 evitable''')
#         self.labelframe_co2_evitable.configure(background="#d9d9d9")
#         self.labelframe_co2_evitable.configure(highlightbackground="#d9d9d9")
#         self.labelframe_co2_evitable.configure(highlightcolor="black")
#         
#         self.co2_evitable_in = tk.Checkbutton(self.labelframe_co2_evitable)
#         self.co2_evitable_in.pack(side='left', padx=10)
#         self.co2_evitable_in.configure(activebackground="#ececec")
#         self.co2_evitable_in.configure(activeforeground="#000000")
#         self.co2_evitable_in.configure(background="#d9d9d9")
#         self.co2_evitable_in.configure(disabledforeground="#a3a3a3")
#         self.co2_evitable_in.configure(foreground="#000000")
#         self.co2_evitable_in.configure(highlightbackground="#d9d9d9")
#         self.co2_evitable_in.configure(highlightcolor="black")
#         self.co2_evitable_in.configure(justify='left')
#         self.co2_evitable_in.configure(text='''Incluir''')
#         self.co2_evitable_in.configure(
#             variable=generator_support.co2_evitable)
# 
#         self.from_co2_evitable = DateEntry(self.labelframe_co2_evitable, width=20)
#         self.from_co2_evitable.pack(side='left', padx=10)
#         self.from_co2_evitable.configure(background="white")
#         self.from_co2_evitable.configure(disabledforeground="#a3a3a3")
#         self.from_co2_evitable.configure(font="TkFixedFont")
#         self.from_co2_evitable.configure(foreground="#000000")
# 
#         self.to_co2_evitable = DateEntry(self.labelframe_co2_evitable, width=20)
#         self.to_co2_evitable.pack(side='left', padx=10)
#         self.to_co2_evitable.configure(background="white")
#         self.to_co2_evitable.configure(disabledforeground="#a3a3a3")
#         self.to_co2_evitable.configure(font="TkFixedFont")
#         self.to_co2_evitable.configure(foreground="#000000")
# 
#         self.steps_co2_evitable = IntEntry(self.labelframe_co2_evitable, width=5)
#         self.steps_co2_evitable.pack(side='left')
#         self.steps_co2_evitable.configure(background="white")
#         self.steps_co2_evitable.configure(font="TkFixedFont")
#         self.steps_co2_evitable.configure(foreground="#000000")
# =============================================================================
        
        #Generación tiempo real solar fotovoltaica
        self.labelframe_solar_real_foto = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_solar_real_foto.pack()
        self.labelframe_solar_real_foto.configure(relief='groove')
        self.labelframe_solar_real_foto.configure(foreground="black")
        self.labelframe_solar_real_foto.configure(text='''Generación tiempo real solar fotovoltaica''')
        self.labelframe_solar_real_foto.configure(background="#d9d9d9")
        self.labelframe_solar_real_foto.configure(highlightbackground="#d9d9d9")
        self.labelframe_solar_real_foto.configure(highlightcolor="black")
        
        self.solar_real_foto_in = tk.Checkbutton(self.labelframe_solar_real_foto)
        self.solar_real_foto_in.pack(side='left', padx=10)
        self.solar_real_foto_in.configure(activebackground="#ececec")
        self.solar_real_foto_in.configure(activeforeground="#000000")
        self.solar_real_foto_in.configure(background="#d9d9d9")
        self.solar_real_foto_in.configure(disabledforeground="#a3a3a3")
        self.solar_real_foto_in.configure(foreground="#000000")
        self.solar_real_foto_in.configure(highlightbackground="#d9d9d9")
        self.solar_real_foto_in.configure(highlightcolor="black")
        self.solar_real_foto_in.configure(justify='left')
        self.solar_real_foto_in.configure(text='''Incluir''')
        self.solar_real_foto_in.configure(
            variable=generator_support.solar_real_foto_in)

        self.from_solar_real_foto = DateEntry(self.labelframe_solar_real_foto, width=20)
        self.from_solar_real_foto.pack(side='left', padx=10)
        self.from_solar_real_foto.configure(background="white")
        self.from_solar_real_foto.configure(disabledforeground="#a3a3a3")
        self.from_solar_real_foto.configure(font="TkFixedFont")
        self.from_solar_real_foto.configure(foreground="#000000")

        self.to_solar_real_foto = DateEntry(self.labelframe_solar_real_foto, width=20)
        self.to_solar_real_foto.pack(side='left', padx=10)
        self.to_solar_real_foto.configure(background="white")
        self.to_solar_real_foto.configure(disabledforeground="#a3a3a3")
        self.to_solar_real_foto.configure(font="TkFixedFont")
        self.to_solar_real_foto.configure(foreground="#000000")

        self.steps_solar_real_foto = IntEntry(self.labelframe_solar_real_foto, width=5)
        self.steps_solar_real_foto.pack(side='left')
        self.steps_solar_real_foto.configure(background="white")
        self.steps_solar_real_foto.configure(font="TkFixedFont")
        self.steps_solar_real_foto.configure(foreground="#000000")
        
        #Generación tiempo real solar térmica
        self.labelframe_solar_real_term = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_solar_real_term.pack()
        self.labelframe_solar_real_term.configure(relief='groove')
        self.labelframe_solar_real_term.configure(foreground="black")
        self.labelframe_solar_real_term.configure(text='''Generación tiempo real solar térmica''')
        self.labelframe_solar_real_term.configure(background="#d9d9d9")
        self.labelframe_solar_real_term.configure(highlightbackground="#d9d9d9")
        self.labelframe_solar_real_term.configure(highlightcolor="black")
        
        self.solar_real_term_in = tk.Checkbutton(self.labelframe_solar_real_term)
        self.solar_real_term_in.pack(side='left', padx=10)
        self.solar_real_term_in.configure(activebackground="#ececec")
        self.solar_real_term_in.configure(activeforeground="#000000")
        self.solar_real_term_in.configure(background="#d9d9d9")
        self.solar_real_term_in.configure(disabledforeground="#a3a3a3")
        self.solar_real_term_in.configure(foreground="#000000")
        self.solar_real_term_in.configure(highlightbackground="#d9d9d9")
        self.solar_real_term_in.configure(highlightcolor="black")
        self.solar_real_term_in.configure(justify='left')
        self.solar_real_term_in.configure(text='''Incluir''')
        self.solar_real_term_in.configure(
            variable=generator_support.solar_real_term_in)

        self.from_solar_real_term = DateEntry(self.labelframe_solar_real_term, width=20)
        self.from_solar_real_term.pack(side='left', padx=10)
        self.from_solar_real_term.configure(background="white")
        self.from_solar_real_term.configure(disabledforeground="#a3a3a3")
        self.from_solar_real_term.configure(font="TkFixedFont")
        self.from_solar_real_term.configure(foreground="#000000")

        self.to_solar_real_term = DateEntry(self.labelframe_solar_real_term, width=20)
        self.to_solar_real_term.pack(side='left', padx=10)
        self.to_solar_real_term.configure(background="white")
        self.to_solar_real_term.configure(disabledforeground="#a3a3a3")
        self.to_solar_real_term.configure(font="TkFixedFont")
        self.to_solar_real_term.configure(foreground="#000000")

        self.steps_solar_real_term = IntEntry(self.labelframe_solar_real_term, width=5)
        self.steps_solar_real_term.pack(side='left')
        self.steps_solar_real_term.configure(background="white")
        self.steps_solar_real_term.configure(font="TkFixedFont")
        self.steps_solar_real_term.configure(foreground="#000000")
        
        #Generación medida Eólica
        self.labelframe_generacion_medida_eol = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_medida_eol.pack()
        self.labelframe_generacion_medida_eol.configure(relief='groove')
        self.labelframe_generacion_medida_eol.configure(foreground="black")
        self.labelframe_generacion_medida_eol.configure(text='''Generación medida Eólica''')
        self.labelframe_generacion_medida_eol.configure(background="#d9d9d9")
        self.labelframe_generacion_medida_eol.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_medida_eol.configure(highlightcolor="black")
        
        self.generacion_medida_eol_in = tk.Checkbutton(self.labelframe_generacion_medida_eol)
        self.generacion_medida_eol_in.pack(side='left', padx=10)
        self.generacion_medida_eol_in.configure(activebackground="#ececec")
        self.generacion_medida_eol_in.configure(activeforeground="#000000")
        self.generacion_medida_eol_in.configure(background="#d9d9d9")
        self.generacion_medida_eol_in.configure(disabledforeground="#a3a3a3")
        self.generacion_medida_eol_in.configure(foreground="#000000")
        self.generacion_medida_eol_in.configure(highlightbackground="#d9d9d9")
        self.generacion_medida_eol_in.configure(highlightcolor="black")
        self.generacion_medida_eol_in.configure(justify='left')
        self.generacion_medida_eol_in.configure(text='''Incluir''')
        self.generacion_medida_eol_in.configure(
            variable=generator_support.generacion_medida_eolica)

        self.from_generacion_medida_eol = DateEntry(self.labelframe_generacion_medida_eol, width=20)
        self.from_generacion_medida_eol.pack(side='left', padx=10)
        self.from_generacion_medida_eol.configure(background="white")
        self.from_generacion_medida_eol.configure(disabledforeground="#a3a3a3")
        self.from_generacion_medida_eol.configure(font="TkFixedFont")
        self.from_generacion_medida_eol.configure(foreground="#000000")

        self.to_generacion_medida_eol = DateEntry(self.labelframe_generacion_medida_eol, width=20)
        self.to_generacion_medida_eol.pack(side='left', padx=10)
        self.to_generacion_medida_eol.configure(background="white")
        self.to_generacion_medida_eol.configure(disabledforeground="#a3a3a3")
        self.to_generacion_medida_eol.configure(font="TkFixedFont")
        self.to_generacion_medida_eol.configure(foreground="#000000")

        self.steps_generacion_medida_eol = IntEntry(self.labelframe_generacion_medida_eol, width=5)
        self.steps_generacion_medida_eol.pack(side='left')
        self.steps_generacion_medida_eol.configure(background="white")
        self.steps_generacion_medida_eol.configure(font="TkFixedFont")
        self.steps_generacion_medida_eol.configure(foreground="#000000")
        
        #Generación medida Eólica marina
        self.labelframe_generacion_medida_eol_marina = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_medida_eol_marina.pack()
        self.labelframe_generacion_medida_eol_marina.configure(relief='groove')
        self.labelframe_generacion_medida_eol_marina.configure(foreground="black")
        self.labelframe_generacion_medida_eol_marina.configure(text='''Generación medida Eólica marina''')
        self.labelframe_generacion_medida_eol_marina.configure(background="#d9d9d9")
        self.labelframe_generacion_medida_eol_marina.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_medida_eol_marina.configure(highlightcolor="black")
        
        self.generacion_medida_eol_marina_in = tk.Checkbutton(self.labelframe_generacion_medida_eol_marina)
        self.generacion_medida_eol_marina_in.pack(side='left', padx=10)
        self.generacion_medida_eol_marina_in.configure(activebackground="#ececec")
        self.generacion_medida_eol_marina_in.configure(activeforeground="#000000")
        self.generacion_medida_eol_marina_in.configure(background="#d9d9d9")
        self.generacion_medida_eol_marina_in.configure(disabledforeground="#a3a3a3")
        self.generacion_medida_eol_marina_in.configure(foreground="#000000")
        self.generacion_medida_eol_marina_in.configure(highlightbackground="#d9d9d9")
        self.generacion_medida_eol_marina_in.configure(highlightcolor="black")
        self.generacion_medida_eol_marina_in.configure(justify='left')
        self.generacion_medida_eol_marina_in.configure(text='''Incluir''')
        self.generacion_medida_eol_marina_in.configure(
            variable=generator_support.generacion_medida_eolica_marina)

        self.from_generacion_medida_eol_marina = DateEntry(self.labelframe_generacion_medida_eol_marina, width=20)
        self.from_generacion_medida_eol_marina.pack(side='left', padx=10)
        self.from_generacion_medida_eol_marina.configure(background="white")
        self.from_generacion_medida_eol_marina.configure(disabledforeground="#a3a3a3")
        self.from_generacion_medida_eol_marina.configure(font="TkFixedFont")
        self.from_generacion_medida_eol_marina.configure(foreground="#000000")

        self.to_generacion_medida_eol_marina = DateEntry(self.labelframe_generacion_medida_eol_marina, width=20)
        self.to_generacion_medida_eol_marina.pack(side='left', padx=10)
        self.to_generacion_medida_eol_marina.configure(background="white")
        self.to_generacion_medida_eol_marina.configure(disabledforeground="#a3a3a3")
        self.to_generacion_medida_eol_marina.configure(font="TkFixedFont")
        self.to_generacion_medida_eol_marina.configure(foreground="#000000")

        self.steps_generacion_medida_eol_marina = IntEntry(self.labelframe_generacion_medida_eol_marina, width=5)
        self.steps_generacion_medida_eol_marina.pack(side='left')
        self.steps_generacion_medida_eol_marina.configure(background="white")
        self.steps_generacion_medida_eol_marina.configure(font="TkFixedFont")
        self.steps_generacion_medida_eol_marina.configure(foreground="#000000")
        
        #Generación medida Eólica terrestre
        self.labelframe_generacion_medida_eol_terrestre = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_medida_eol_terrestre.pack()
        self.labelframe_generacion_medida_eol_terrestre.configure(relief='groove')
        self.labelframe_generacion_medida_eol_terrestre.configure(foreground="black")
        self.labelframe_generacion_medida_eol_terrestre.configure(text='''Generación medida Eólica terrestre''')
        self.labelframe_generacion_medida_eol_terrestre.configure(background="#d9d9d9")
        self.labelframe_generacion_medida_eol_terrestre.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_medida_eol_terrestre.configure(highlightcolor="black")
        
        self.generacion_medida_eol_terrestre_in = tk.Checkbutton(self.labelframe_generacion_medida_eol_terrestre)
        self.generacion_medida_eol_terrestre_in.pack(side='left', padx=10)
        self.generacion_medida_eol_terrestre_in.configure(activebackground="#ececec")
        self.generacion_medida_eol_terrestre_in.configure(activeforeground="#000000")
        self.generacion_medida_eol_terrestre_in.configure(background="#d9d9d9")
        self.generacion_medida_eol_terrestre_in.configure(disabledforeground="#a3a3a3")
        self.generacion_medida_eol_terrestre_in.configure(foreground="#000000")
        self.generacion_medida_eol_terrestre_in.configure(highlightbackground="#d9d9d9")
        self.generacion_medida_eol_terrestre_in.configure(highlightcolor="black")
        self.generacion_medida_eol_terrestre_in.configure(justify='left')
        self.generacion_medida_eol_terrestre_in.configure(text='''Incluir''')
        self.generacion_medida_eol_terrestre_in.configure(
            variable=generator_support.generacion_medida_eolica_terrestre)

        self.from_generacion_medida_eol_terrestre = DateEntry(self.labelframe_generacion_medida_eol_terrestre, width=20)
        self.from_generacion_medida_eol_terrestre.pack(side='left', padx=10)
        self.from_generacion_medida_eol_terrestre.configure(background="white")
        self.from_generacion_medida_eol_terrestre.configure(disabledforeground="#a3a3a3")
        self.from_generacion_medida_eol_terrestre.configure(font="TkFixedFont")
        self.from_generacion_medida_eol_terrestre.configure(foreground="#000000")

        self.to_generacion_medida_eol_terrestre = DateEntry(self.labelframe_generacion_medida_eol_terrestre, width=20)
        self.to_generacion_medida_eol_terrestre.pack(side='left', padx=10)
        self.to_generacion_medida_eol_terrestre.configure(background="white")
        self.to_generacion_medida_eol_terrestre.configure(disabledforeground="#a3a3a3")
        self.to_generacion_medida_eol_terrestre.configure(font="TkFixedFont")
        self.to_generacion_medida_eol_terrestre.configure(foreground="#000000")

        self.steps_generacion_medida_eol_terrestre = IntEntry(self.labelframe_generacion_medida_eol_terrestre, width=5)
        self.steps_generacion_medida_eol_terrestre.pack(side='left')
        self.steps_generacion_medida_eol_terrestre.configure(background="white")
        self.steps_generacion_medida_eol_terrestre.configure(font="TkFixedFont")
        self.steps_generacion_medida_eol_terrestre.configure(foreground="#000000")
        
        #Generación medida solar
        self.labelframe_generacion_medida_solar = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_medida_solar.pack()
        self.labelframe_generacion_medida_solar.configure(relief='groove')
        self.labelframe_generacion_medida_solar.configure(foreground="black")
        self.labelframe_generacion_medida_solar.configure(text='''Generación medida solar''')
        self.labelframe_generacion_medida_solar.configure(background="#d9d9d9")
        self.labelframe_generacion_medida_solar.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_medida_solar.configure(highlightcolor="black")
        
        self.generacion_medida_solar_in = tk.Checkbutton(self.labelframe_generacion_medida_solar)
        self.generacion_medida_solar_in.pack(side='left', padx=10)
        self.generacion_medida_solar_in.configure(activebackground="#ececec")
        self.generacion_medida_solar_in.configure(activeforeground="#000000")
        self.generacion_medida_solar_in.configure(background="#d9d9d9")
        self.generacion_medida_solar_in.configure(disabledforeground="#a3a3a3")
        self.generacion_medida_solar_in.configure(foreground="#000000")
        self.generacion_medida_solar_in.configure(highlightbackground="#d9d9d9")
        self.generacion_medida_solar_in.configure(highlightcolor="black")
        self.generacion_medida_solar_in.configure(justify='left')
        self.generacion_medida_solar_in.configure(text='''Incluir''')
        self.generacion_medida_solar_in.configure(
            variable=generator_support.generacion_medida_solar)

        self.from_generacion_medida_solar = DateEntry(self.labelframe_generacion_medida_solar, width=20)
        self.from_generacion_medida_solar.pack(side='left', padx=10)
        self.from_generacion_medida_solar.configure(background="white")
        self.from_generacion_medida_solar.configure(disabledforeground="#a3a3a3")
        self.from_generacion_medida_solar.configure(font="TkFixedFont")
        self.from_generacion_medida_solar.configure(foreground="#000000")

        self.to_generacion_medida_solar = DateEntry(self.labelframe_generacion_medida_solar, width=20)
        self.to_generacion_medida_solar.pack(side='left', padx=10)
        self.to_generacion_medida_solar.configure(background="white")
        self.to_generacion_medida_solar.configure(disabledforeground="#a3a3a3")
        self.to_generacion_medida_solar.configure(font="TkFixedFont")
        self.to_generacion_medida_solar.configure(foreground="#000000")

        self.steps_generacion_medida_solar = IntEntry(self.labelframe_generacion_medida_solar, width=5)
        self.steps_generacion_medida_solar.pack(side='left')
        self.steps_generacion_medida_solar.configure(background="white")
        self.steps_generacion_medida_solar.configure(font="TkFixedFont")
        self.steps_generacion_medida_solar.configure(foreground="#000000")
        
        #Generación medida solar fotovoltaica
        self.labelframe_generacion_medida_solar_foto = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_medida_solar_foto.pack()
        self.labelframe_generacion_medida_solar_foto.configure(relief='groove')
        self.labelframe_generacion_medida_solar_foto.configure(foreground="black")
        self.labelframe_generacion_medida_solar_foto.configure(text='''Generación medida solar fotovoltaica''')
        self.labelframe_generacion_medida_solar_foto.configure(background="#d9d9d9")
        self.labelframe_generacion_medida_solar_foto.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_medida_solar_foto.configure(highlightcolor="black")
        
        self.generacion_medida_solar_foto_in = tk.Checkbutton(self.labelframe_generacion_medida_solar_foto)
        self.generacion_medida_solar_foto_in.pack(side='left', padx=10)
        self.generacion_medida_solar_foto_in.configure(activebackground="#ececec")
        self.generacion_medida_solar_foto_in.configure(activeforeground="#000000")
        self.generacion_medida_solar_foto_in.configure(background="#d9d9d9")
        self.generacion_medida_solar_foto_in.configure(disabledforeground="#a3a3a3")
        self.generacion_medida_solar_foto_in.configure(foreground="#000000")
        self.generacion_medida_solar_foto_in.configure(highlightbackground="#d9d9d9")
        self.generacion_medida_solar_foto_in.configure(highlightcolor="black")
        self.generacion_medida_solar_foto_in.configure(justify='left')
        self.generacion_medida_solar_foto_in.configure(text='''Incluir''')
        self.generacion_medida_solar_foto_in.configure(
            variable=generator_support.generacion_medida_solar_fotovoltaica)

        self.from_generacion_medida_solar_foto = DateEntry(self.labelframe_generacion_medida_solar_foto, width=20)
        self.from_generacion_medida_solar_foto.pack(side='left', padx=10)
        self.from_generacion_medida_solar_foto.configure(background="white")
        self.from_generacion_medida_solar_foto.configure(disabledforeground="#a3a3a3")
        self.from_generacion_medida_solar_foto.configure(font="TkFixedFont")
        self.from_generacion_medida_solar_foto.configure(foreground="#000000")

        self.to_generacion_medida_solar_foto = DateEntry(self.labelframe_generacion_medida_solar_foto, width=20)
        self.to_generacion_medida_solar_foto.pack(side='left', padx=10)
        self.to_generacion_medida_solar_foto.configure(background="white")
        self.to_generacion_medida_solar_foto.configure(disabledforeground="#a3a3a3")
        self.to_generacion_medida_solar_foto.configure(font="TkFixedFont")
        self.to_generacion_medida_solar_foto.configure(foreground="#000000")

        self.steps_generacion_medida_solar_foto = IntEntry(self.labelframe_generacion_medida_solar_foto, width=5)
        self.steps_generacion_medida_solar_foto.pack(side='left')
        self.steps_generacion_medida_solar_foto.configure(background="white")
        self.steps_generacion_medida_solar_foto.configure(font="TkFixedFont")
        self.steps_generacion_medida_solar_foto.configure(foreground="#000000")
        
        #Generación medida solar térmica
        self.labelframe_generacion_medida_solar_term = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_medida_solar_term.pack()
        self.labelframe_generacion_medida_solar_term.configure(relief='groove')
        self.labelframe_generacion_medida_solar_term.configure(foreground="black")
        self.labelframe_generacion_medida_solar_term.configure(text='''Generación medida solar térmica''')
        self.labelframe_generacion_medida_solar_term.configure(background="#d9d9d9")
        self.labelframe_generacion_medida_solar_term.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_medida_solar_term.configure(highlightcolor="black")
        
        self.generacion_medida_solar_term_in = tk.Checkbutton(self.labelframe_generacion_medida_solar_term)
        self.generacion_medida_solar_term_in.pack(side='left', padx=10)
        self.generacion_medida_solar_term_in.configure(activebackground="#ececec")
        self.generacion_medida_solar_foto_in.configure(activeforeground="#000000")
        self.generacion_medida_solar_term_in.configure(background="#d9d9d9")
        self.generacion_medida_solar_term_in.configure(disabledforeground="#a3a3a3")
        self.generacion_medida_solar_term_in.configure(foreground="#000000")
        self.generacion_medida_solar_term_in.configure(highlightbackground="#d9d9d9")
        self.generacion_medida_solar_term_in.configure(highlightcolor="black")
        self.generacion_medida_solar_term_in.configure(justify='left')
        self.generacion_medida_solar_term_in.configure(text='''Incluir''')
        self.generacion_medida_solar_term_in.configure(
            variable=generator_support.generacion_medida_solar_termica)

        self.from_generacion_medida_solar_term = DateEntry(self.labelframe_generacion_medida_solar_term, width=20)
        self.from_generacion_medida_solar_term.pack(side='left', padx=10)
        self.from_generacion_medida_solar_term.configure(background="white")
        self.from_generacion_medida_solar_term.configure(disabledforeground="#a3a3a3")
        self.from_generacion_medida_solar_term.configure(font="TkFixedFont")
        self.from_generacion_medida_solar_term.configure(foreground="#000000")

        self.to_generacion_medida_solar_term = DateEntry(self.labelframe_generacion_medida_solar_term, width=20)
        self.to_generacion_medida_solar_term.pack(side='left', padx=10)
        self.to_generacion_medida_solar_term.configure(background="white")
        self.to_generacion_medida_solar_term.configure(disabledforeground="#a3a3a3")
        self.to_generacion_medida_solar_term.configure(font="TkFixedFont")
        self.to_generacion_medida_solar_term.configure(foreground="#000000")

        self.steps_generacion_medida_solar_term = IntEntry(self.labelframe_generacion_medida_solar_term, width=5)
        self.steps_generacion_medida_solar_term.pack(side='left')
        self.steps_generacion_medida_solar_term.configure(background="white")
        self.steps_generacion_medida_solar_term.configure(font="TkFixedFont")
        self.steps_generacion_medida_solar_term.configure(foreground="#000000")
        
        #Generación medida total
        self.labelframe_generacion_medida_total = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_medida_total.pack()
        self.labelframe_generacion_medida_total.configure(relief='groove')
        self.labelframe_generacion_medida_total.configure(foreground="black")
        self.labelframe_generacion_medida_total.configure(text='''Generación medida total''')
        self.labelframe_generacion_medida_total.configure(background="#d9d9d9")
        self.labelframe_generacion_medida_total.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_medida_total.configure(highlightcolor="black")
        
        self.generacion_medida_total_in = tk.Checkbutton(self.labelframe_generacion_medida_total)
        self.generacion_medida_total_in.pack(side='left', padx=10)
        self.generacion_medida_total_in.configure(activebackground="#ececec")
        self.generacion_medida_total_in.configure(activeforeground="#000000")
        self.generacion_medida_total_in.configure(background="#d9d9d9")
        self.generacion_medida_total_in.configure(disabledforeground="#a3a3a3")
        self.generacion_medida_total_in.configure(foreground="#000000")
        self.generacion_medida_total_in.configure(highlightbackground="#d9d9d9")
        self.generacion_medida_total_in.configure(highlightcolor="black")
        self.generacion_medida_total_in.configure(justify='left')
        self.generacion_medida_total_in.configure(text='''Incluir''')
        self.generacion_medida_total_in.configure(
            variable=generator_support.generacion_medida_total)

        self.from_generacion_medida_total = DateEntry(self.labelframe_generacion_medida_total, width=20)
        self.from_generacion_medida_total.pack(side='left', padx=10)
        self.from_generacion_medida_total.configure(background="white")
        self.from_generacion_medida_total.configure(disabledforeground="#a3a3a3")
        self.from_generacion_medida_total.configure(font="TkFixedFont")
        self.from_generacion_medida_total.configure(foreground="#000000")

        self.to_generacion_medida_total = DateEntry(self.labelframe_generacion_medida_total, width=20)
        self.to_generacion_medida_total.pack(side='left', padx=10)
        self.to_generacion_medida_total.configure(background="white")
        self.to_generacion_medida_total.configure(disabledforeground="#a3a3a3")
        self.to_generacion_medida_total.configure(font="TkFixedFont")
        self.to_generacion_medida_total.configure(foreground="#000000")

        self.steps_generacion_medida_total = IntEntry(self.labelframe_generacion_medida_total, width=5)
        self.steps_generacion_medida_total.pack(side='left')
        self.steps_generacion_medida_total.configure(background="white")
        self.steps_generacion_medida_total.configure(font="TkFixedFont")
        self.steps_generacion_medida_total.configure(foreground="#000000")
        
        #Generación prevista total
        self.labelframe_generacion_prevista_total = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_prevista_total.pack()
        self.labelframe_generacion_prevista_total.configure(relief='groove')
        self.labelframe_generacion_prevista_total.configure(foreground="black")
        self.labelframe_generacion_prevista_total.configure(text='''Generación prevista total''')
        self.labelframe_generacion_prevista_total.configure(background="#d9d9d9")
        self.labelframe_generacion_prevista_total.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_prevista_total.configure(highlightcolor="black")
        
        self.generacion_prevista_total_in = tk.Checkbutton(self.labelframe_generacion_prevista_total)
        self.generacion_prevista_total_in.pack(side='left', padx=10)
        self.generacion_prevista_total_in.configure(activebackground="#ececec")
        self.generacion_prevista_total_in.configure(activeforeground="#000000")
        self.generacion_prevista_total_in.configure(background="#d9d9d9")
        self.generacion_prevista_total_in.configure(disabledforeground="#a3a3a3")
        self.generacion_prevista_total_in.configure(foreground="#000000")
        self.generacion_prevista_total_in.configure(highlightbackground="#d9d9d9")
        self.generacion_prevista_total_in.configure(highlightcolor="black")
        self.generacion_prevista_total_in.configure(justify='left')
        self.generacion_prevista_total_in.configure(text='''Incluir''')
        self.generacion_prevista_total_in.configure(
            variable=generator_support.generacion_prevista_total_in)

        self.from_generacion_prevista_total = DateEntry(self.labelframe_generacion_prevista_total, width=20)
        self.from_generacion_prevista_total.pack(side='left', padx=10)
        self.from_generacion_prevista_total.configure(background="white")
        self.from_generacion_prevista_total.configure(disabledforeground="#a3a3a3")
        self.from_generacion_prevista_total.configure(font="TkFixedFont")
        self.from_generacion_prevista_total.configure(foreground="#000000")

        self.to_generacion_prevista_total = DateEntry(self.labelframe_generacion_prevista_total, width=20)
        self.to_generacion_prevista_total.pack(side='left', padx=10)
        self.to_generacion_prevista_total.configure(background="white")
        self.to_generacion_prevista_total.configure(disabledforeground="#a3a3a3")
        self.to_generacion_prevista_total.configure(font="TkFixedFont")
        self.to_generacion_prevista_total.configure(foreground="#000000")

        self.steps_generacion_prevista_total = IntEntry(self.labelframe_generacion_prevista_total, width=5)
        self.steps_generacion_prevista_total.pack(side='left')
        self.steps_generacion_prevista_total.configure(background="white")
        self.steps_generacion_prevista_total.configure(font="TkFixedFont")
        self.steps_generacion_prevista_total.configure(foreground="#000000")
        
        #Generación prevista solar
        self.labelframe_generacion_prevista_solar = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_prevista_solar.pack()
        self.labelframe_generacion_prevista_solar.configure(relief='groove')
        self.labelframe_generacion_prevista_solar.configure(foreground="black")
        self.labelframe_generacion_prevista_solar.configure(text='''Generación prevista solar''')
        self.labelframe_generacion_prevista_solar.configure(background="#d9d9d9")
        self.labelframe_generacion_prevista_solar.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_prevista_solar.configure(highlightcolor="black")
        
        self.generacion_prevista_solar_in = tk.Checkbutton(self.labelframe_generacion_prevista_solar)
        self.generacion_prevista_solar_in.pack(side='left', padx=10)
        self.generacion_prevista_solar_in.configure(activebackground="#ececec")
        self.generacion_prevista_solar_in.configure(activeforeground="#000000")
        self.generacion_prevista_solar_in.configure(background="#d9d9d9")
        self.generacion_prevista_solar_in.configure(disabledforeground="#a3a3a3")
        self.generacion_prevista_solar_in.configure(foreground="#000000")
        self.generacion_prevista_solar_in.configure(highlightbackground="#d9d9d9")
        self.generacion_prevista_solar_in.configure(highlightcolor="black")
        self.generacion_prevista_solar_in.configure(justify='left')
        self.generacion_prevista_solar_in.configure(text='''Incluir''')
        self.generacion_prevista_solar_in.configure(
            variable=generator_support.generacion_prevista_solar_in)

        self.from_generacion_prevista_solar = DateEntry(self.labelframe_generacion_prevista_solar, width=20)
        self.from_generacion_prevista_solar.pack(side='left', padx=10)
        self.from_generacion_prevista_solar.configure(background="white")
        self.from_generacion_prevista_solar.configure(disabledforeground="#a3a3a3")
        self.from_generacion_prevista_solar.configure(font="TkFixedFont")
        self.from_generacion_prevista_solar.configure(foreground="#000000")

        self.to_generacion_prevista_solar = DateEntry(self.labelframe_generacion_prevista_solar, width=20)
        self.to_generacion_prevista_solar.pack(side='left', padx=10)
        self.to_generacion_prevista_solar.configure(background="white")
        self.to_generacion_prevista_solar.configure(disabledforeground="#a3a3a3")
        self.to_generacion_prevista_solar.configure(font="TkFixedFont")
        self.to_generacion_prevista_solar.configure(foreground="#000000")

        self.steps_generacion_prevista_solar = IntEntry(self.labelframe_generacion_prevista_solar, width=5)
        self.steps_generacion_prevista_solar.pack(side='left')
        self.steps_generacion_prevista_solar.configure(background="white")
        self.steps_generacion_prevista_solar.configure(font="TkFixedFont")
        self.steps_generacion_prevista_solar.configure(foreground="#000000")
        
        #Generación prevista solar fotovoltaica
        self.labelframe_generacion_prevista_solar_foto = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_prevista_solar_foto.pack()
        self.labelframe_generacion_prevista_solar_foto.configure(relief='groove')
        self.labelframe_generacion_prevista_solar_foto.configure(foreground="black")
        self.labelframe_generacion_prevista_solar_foto.configure(text='''Generación prevista solar fotovoltaica''')
        self.labelframe_generacion_prevista_solar_foto.configure(background="#d9d9d9")
        self.labelframe_generacion_prevista_solar_foto.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_prevista_solar_foto.configure(highlightcolor="black")
        
        self.generacion_prevista_solar_foto_in = tk.Checkbutton(self.labelframe_generacion_prevista_solar_foto)
        self.generacion_prevista_solar_foto_in.pack(side='left', padx=10)
        self.generacion_prevista_solar_foto_in.configure(activebackground="#ececec")
        self.generacion_prevista_solar_foto_in.configure(activeforeground="#000000")
        self.generacion_prevista_solar_foto_in.configure(background="#d9d9d9")
        self.generacion_prevista_solar_foto_in.configure(disabledforeground="#a3a3a3")
        self.generacion_prevista_solar_foto_in.configure(foreground="#000000")
        self.generacion_prevista_solar_foto_in.configure(highlightbackground="#d9d9d9")
        self.generacion_prevista_solar_foto_in.configure(highlightcolor="black")
        self.generacion_prevista_solar_foto_in.configure(justify='left')
        self.generacion_prevista_solar_foto_in.configure(text='''Incluir''')
        self.generacion_prevista_solar_foto_in.configure(
            variable=generator_support.generacion_prevista_solar_fotovoltaica)

        self.from_generacion_prevista_solar_foto = DateEntry(self.labelframe_generacion_prevista_solar_foto, width=20)
        self.from_generacion_prevista_solar_foto.pack(side='left', padx=10)
        self.from_generacion_prevista_solar_foto.configure(background="white")
        self.from_generacion_prevista_solar_foto.configure(disabledforeground="#a3a3a3")
        self.from_generacion_prevista_solar_foto.configure(font="TkFixedFont")
        self.from_generacion_prevista_solar_foto.configure(foreground="#000000")

        self.to_generacion_prevista_solar_foto = DateEntry(self.labelframe_generacion_prevista_solar_foto, width=20)
        self.to_generacion_prevista_solar_foto.pack(side='left', padx=10)
        self.to_generacion_prevista_solar_foto.configure(background="white")
        self.to_generacion_prevista_solar_foto.configure(disabledforeground="#a3a3a3")
        self.to_generacion_prevista_solar_foto.configure(font="TkFixedFont")
        self.to_generacion_prevista_solar_foto.configure(foreground="#000000")

        self.steps_generacion_prevista_solar_foto = IntEntry(self.labelframe_generacion_prevista_solar_foto, width=5)
        self.steps_generacion_prevista_solar_foto.pack(side='left')
        self.steps_generacion_prevista_solar_foto.configure(background="white")
        self.steps_generacion_prevista_solar_foto.configure(font="TkFixedFont")
        self.steps_generacion_prevista_solar_foto.configure(foreground="#000000")
        
        #Generación prevista solar térmica
        self.labelframe_generacion_prevista_solar_term = tk.LabelFrame(self.frame, pady=20, padx=15)
        self.labelframe_generacion_prevista_solar_term.pack()
        self.labelframe_generacion_prevista_solar_term.configure(relief='groove')
        self.labelframe_generacion_prevista_solar_term.configure(foreground="black")
        self.labelframe_generacion_prevista_solar_term.configure(text='''Generación prevista solar térmica''')
        self.labelframe_generacion_prevista_solar_term.configure(background="#d9d9d9")
        self.labelframe_generacion_prevista_solar_term.configure(highlightbackground="#d9d9d9")
        self.labelframe_generacion_prevista_solar_term.configure(highlightcolor="black")
        
        self.generacion_prevista_solar_term_in = tk.Checkbutton(self.labelframe_generacion_prevista_solar_term)
        self.generacion_prevista_solar_term_in.pack(side='left', padx=10)
        self.generacion_prevista_solar_term_in.configure(activebackground="#ececec")
        self.generacion_prevista_solar_term_in.configure(activeforeground="#000000")
        self.generacion_prevista_solar_term_in.configure(background="#d9d9d9")
        self.generacion_prevista_solar_term_in.configure(disabledforeground="#a3a3a3")
        self.generacion_prevista_solar_term_in.configure(foreground="#000000")
        self.generacion_prevista_solar_term_in.configure(highlightbackground="#d9d9d9")
        self.generacion_prevista_solar_term_in.configure(highlightcolor="black")
        self.generacion_prevista_solar_term_in.configure(justify='left')
        self.generacion_prevista_solar_term_in.configure(text='''Incluir''')
        self.generacion_prevista_solar_term_in.configure(
            variable=generator_support.generacion_prevista_solar_termica)

        self.from_generacion_prevista_solar_term = DateEntry(self.labelframe_generacion_prevista_solar_term, width=20)
        self.from_generacion_prevista_solar_term.pack(side='left', padx=10)
        self.from_generacion_prevista_solar_term.configure(background="white")
        self.from_generacion_prevista_solar_term.configure(disabledforeground="#a3a3a3")
        self.from_generacion_prevista_solar_term.configure(font="TkFixedFont")
        self.from_generacion_prevista_solar_term.configure(foreground="#000000")

        self.to_generacion_prevista_solar_term = DateEntry(self.labelframe_generacion_prevista_solar_term, width=20)
        self.to_generacion_prevista_solar_term.pack(side='left', padx=10)
        self.to_generacion_prevista_solar_term.configure(background="white")
        self.to_generacion_prevista_solar_term.configure(disabledforeground="#a3a3a3")
        self.to_generacion_prevista_solar_term.configure(font="TkFixedFont")
        self.to_generacion_prevista_solar_term.configure(foreground="#000000")

        self.steps_generacion_prevista_solar_term = IntEntry(self.labelframe_generacion_prevista_solar_term, width=5)
        self.steps_generacion_prevista_solar_term.pack(side='left')
        self.steps_generacion_prevista_solar_term.configure(background="white")
        self.steps_generacion_prevista_solar_term.configure(font="TkFixedFont")
        self.steps_generacion_prevista_solar_term.configure(foreground="#000000")
        
        #Boton
        self.generator = tk.Button(self.frame, height=5)
        self.generator.pack()
        self.generator.configure(activebackground="#ececec")
        self.generator.configure(activeforeground="#000000")
        self.generator.configure(background="#d9d9d9")
        self.generator.configure(disabledforeground="#a3a3a3")
        self.generator.configure(foreground="#000000")
        self.generator.configure(highlightbackground="#d9d9d9")
        self.generator.configure(highlightcolor="black")
        self.generator.configure(pady="0")
        self.generator.configure(text='''Generator''')
        self.generator.configure(command=self.generate)
        
        self.canvas.create_window(0, 0, anchor='nw', window=self.frame)
        self.canvas.update_idletasks()
        
        self.canvas.configure(scrollregion=self.canvas.bbox('all'), 
                 yscrollcommand=self.scrollbar.set)
        
        self.canvas.pack(fill='both', expand=True, side='left')
        self.scrollbar.pack(fill='y', side='right', expand=0)
        

if __name__ == '__main__':
    vp_start_gui()
